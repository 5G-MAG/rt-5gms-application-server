"""
    M1_ContentHostingProvisioning

    5GMS AF M1 Content Hosting Provisioning API Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.   # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from rt_5gms_as.openapi_5g.api_client import ApiClient, Endpoint as _Endpoint
from rt_5gms_as.openapi_5g.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from rt_5gms_as.openapi_5g.model.content_hosting_configuration import ContentHostingConfiguration


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_content_hosting_configuration_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/provisioning-sessions/{provisioningSessionId}/content-hosting-configuration',
                'operation_id': 'create_content_hosting_configuration',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'provisioning_session_id',
                    'content_hosting_configuration',
                ],
                'required': [
                    'provisioning_session_id',
                    'content_hosting_configuration',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provisioning_session_id':
                        (str,),
                    'content_hosting_configuration':
                        (ContentHostingConfiguration,),
                },
                'attribute_map': {
                    'provisioning_session_id': 'provisioningSessionId',
                },
                'location_map': {
                    'provisioning_session_id': 'path',
                    'content_hosting_configuration': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.destroy_content_hosting_configuration_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/provisioning-sessions/{provisioningSessionId}/content-hosting-configuration',
                'operation_id': 'destroy_content_hosting_configuration',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'provisioning_session_id',
                ],
                'required': [
                    'provisioning_session_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provisioning_session_id':
                        (str,),
                },
                'attribute_map': {
                    'provisioning_session_id': 'provisioningSessionId',
                },
                'location_map': {
                    'provisioning_session_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.patch_content_hosting_configuration_endpoint = _Endpoint(
            settings={
                'response_type': (ContentHostingConfiguration,),
                'auth': [],
                'endpoint_path': '/provisioning-sessions/{provisioningSessionId}/content-hosting-configuration',
                'operation_id': 'patch_content_hosting_configuration',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'provisioning_session_id',
                    'content_hosting_configuration',
                ],
                'required': [
                    'provisioning_session_id',
                    'content_hosting_configuration',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provisioning_session_id':
                        (str,),
                    'content_hosting_configuration':
                        (ContentHostingConfiguration,),
                },
                'attribute_map': {
                    'provisioning_session_id': 'provisioningSessionId',
                },
                'location_map': {
                    'provisioning_session_id': 'path',
                    'content_hosting_configuration': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/merge-patch+json',
                    'application/json-patch+json'
                ]
            },
            api_client=api_client
        )
        self.purge_content_hosting_cache_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/provisioning-sessions/{provisioningSessionId}/content-hosting-configuration/purge',
                'operation_id': 'purge_content_hosting_cache',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'provisioning_session_id',
                    'pattern',
                    'value',
                ],
                'required': [
                    'provisioning_session_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provisioning_session_id':
                        (str,),
                    'pattern':
                        (str,),
                    'value':
                        (str,),
                },
                'attribute_map': {
                    'provisioning_session_id': 'provisioningSessionId',
                    'pattern': 'pattern',
                    'value': 'value',
                },
                'location_map': {
                    'provisioning_session_id': 'path',
                    'pattern': 'form',
                    'value': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client
        )
        self.retrieve_content_hosting_configuration_endpoint = _Endpoint(
            settings={
                'response_type': (ContentHostingConfiguration,),
                'auth': [],
                'endpoint_path': '/provisioning-sessions/{provisioningSessionId}/content-hosting-configuration',
                'operation_id': 'retrieve_content_hosting_configuration',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'provisioning_session_id',
                ],
                'required': [
                    'provisioning_session_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provisioning_session_id':
                        (str,),
                },
                'attribute_map': {
                    'provisioning_session_id': 'provisioningSessionId',
                },
                'location_map': {
                    'provisioning_session_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_content_hosting_configuration_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/provisioning-sessions/{provisioningSessionId}/content-hosting-configuration',
                'operation_id': 'update_content_hosting_configuration',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'provisioning_session_id',
                    'content_hosting_configuration',
                ],
                'required': [
                    'provisioning_session_id',
                    'content_hosting_configuration',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provisioning_session_id':
                        (str,),
                    'content_hosting_configuration':
                        (ContentHostingConfiguration,),
                },
                'attribute_map': {
                    'provisioning_session_id': 'provisioningSessionId',
                },
                'location_map': {
                    'provisioning_session_id': 'path',
                    'content_hosting_configuration': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def create_content_hosting_configuration(
        self,
        provisioning_session_id,
        content_hosting_configuration,
        **kwargs
    ):
        """Create (and optionally upload) the Content Hosting Configuration for the specified Provisioning Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_content_hosting_configuration(provisioning_session_id, content_hosting_configuration, async_req=True)
        >>> result = thread.get()

        Args:
            provisioning_session_id (str): The resource identifier of an existing Provisioning Session.
            content_hosting_configuration (ContentHostingConfiguration): A JSON representation of a Content Hosting Configuration

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['provisioning_session_id'] = \
            provisioning_session_id
        kwargs['content_hosting_configuration'] = \
            content_hosting_configuration
        return self.create_content_hosting_configuration_endpoint.call_with_http_info(**kwargs)

    def destroy_content_hosting_configuration(
        self,
        provisioning_session_id,
        **kwargs
    ):
        """Destroy the current Content Hosting Configuration of the specified Provisioning Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.destroy_content_hosting_configuration(provisioning_session_id, async_req=True)
        >>> result = thread.get()

        Args:
            provisioning_session_id (str): The resource identifier of an existing Provisioning Session.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['provisioning_session_id'] = \
            provisioning_session_id
        return self.destroy_content_hosting_configuration_endpoint.call_with_http_info(**kwargs)

    def patch_content_hosting_configuration(
        self,
        provisioning_session_id,
        content_hosting_configuration,
        **kwargs
    ):
        """Patch the Content Hosting Configuration for the specified Provisioning Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_content_hosting_configuration(provisioning_session_id, content_hosting_configuration, async_req=True)
        >>> result = thread.get()

        Args:
            provisioning_session_id (str): The resource identifier of an existing Provisioning Session.
            content_hosting_configuration (ContentHostingConfiguration): A JSON representation of a Content Hosting Configuration

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ContentHostingConfiguration
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['provisioning_session_id'] = \
            provisioning_session_id
        kwargs['content_hosting_configuration'] = \
            content_hosting_configuration
        return self.patch_content_hosting_configuration_endpoint.call_with_http_info(**kwargs)

    def purge_content_hosting_cache(
        self,
        provisioning_session_id,
        **kwargs
    ):
        """Purge the content of the cache for the Content Hosting Configuration of the specified Provisioning Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.purge_content_hosting_cache(provisioning_session_id, async_req=True)
        >>> result = thread.get()

        Args:
            provisioning_session_id (str): A unique identifier of the Provisioning

        Keyword Args:
            pattern (str): Keyword. [optional]
            value (str): The regular expression. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['provisioning_session_id'] = \
            provisioning_session_id
        return self.purge_content_hosting_cache_endpoint.call_with_http_info(**kwargs)

    def retrieve_content_hosting_configuration(
        self,
        provisioning_session_id,
        **kwargs
    ):
        """Retrieve the Content Hosting Configuration of the specified Provisioning Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_content_hosting_configuration(provisioning_session_id, async_req=True)
        >>> result = thread.get()

        Args:
            provisioning_session_id (str): The resource identifier of an existing Provisioning Session.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ContentHostingConfiguration
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['provisioning_session_id'] = \
            provisioning_session_id
        return self.retrieve_content_hosting_configuration_endpoint.call_with_http_info(**kwargs)

    def update_content_hosting_configuration(
        self,
        provisioning_session_id,
        content_hosting_configuration,
        **kwargs
    ):
        """Update the Content Hosting Configuration for the specified Provisioning Session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_content_hosting_configuration(provisioning_session_id, content_hosting_configuration, async_req=True)
        >>> result = thread.get()

        Args:
            provisioning_session_id (str): The resource identifier of an existing Provisioning Session.
            content_hosting_configuration (ContentHostingConfiguration): A JSON representation of a Content Hosting Configuration

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['provisioning_session_id'] = \
            provisioning_session_id
        kwargs['content_hosting_configuration'] = \
            content_hosting_configuration
        return self.update_content_hosting_configuration_endpoint.call_with_http_info(**kwargs)

